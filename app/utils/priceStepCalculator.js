/**
 * üìä VIETNAM STOCK MARKET PRICE STEP CALCULATOR
 * T√≠nh b∆∞·ªõc gi√° theo quy ƒë·ªãnh HSX & HNX
 */

/**
 * T√≠nh b∆∞·ªõc gi√° theo quy ƒë·ªãnh th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam
 * @param {number} price - Gi√° hi·ªán t·∫°i
 * @returns {number} - B∆∞·ªõc gi√° t∆∞∆°ng ·ª©ng
 */
export function calculatePriceStep(price) {
  if (price < 10000) {
    return 10;
  } else if (price < 50000) {
    return 50;
  } else if (price < 100000) {
    return 100;
  } else if (price < 500000) {
    return 500;
  } else {
    return 1000;
  }
}

/**
 * L√†m tr√≤n gi√° theo b∆∞·ªõc gi√° h·ª£p l·ªá
 * @param {number} price - Gi√° c·∫ßn l√†m tr√≤n
 * @returns {number} - Gi√° ƒë√£ ƒë∆∞·ª£c l√†m tr√≤n
 */
export function roundToValidPrice(price) {
  const step = calculatePriceStep(price);
  return Math.round(price / step) * step;
}

/**
 * Ki·ªÉm tra gi√° c√≥ h·ª£p l·ªá theo b∆∞·ªõc gi√° kh√¥ng
 * @param {number} price - Gi√° c·∫ßn ki·ªÉm tra
 * @returns {boolean} - True n·∫øu h·ª£p l·ªá
 */
export function isValidPrice(price) {
  const step = calculatePriceStep(price);
  return price % step === 0;
}

/**
 * L·∫•y gi√° g·∫ßn nh·∫•t h·ª£p l·ªá (cao h∆°n ho·∫∑c th·∫•p h∆°n)
 * @param {number} price - Gi√° hi·ªán t·∫°i
 * @param {string} direction - 'up' ho·∫∑c 'down'
 * @returns {number} - Gi√° h·ª£p l·ªá ti·∫øp theo
 */
export function getNextValidPrice(price, direction = 'up') {
  const step = calculatePriceStep(price);
  const roundedPrice = roundToValidPrice(price);
  
  if (direction === 'up') {
    return roundedPrice >= price ? roundedPrice : roundedPrice + step;
  } else {
    return roundedPrice <= price ? roundedPrice : roundedPrice - step;
  }
}

/**
 * T·∫°o danh s√°ch gi√° h·ª£p l·ªá trong kho·∫£ng
 * @param {number} minPrice - Gi√° t·ªëi thi·ªÉu
 * @param {number} maxPrice - Gi√° t·ªëi ƒëa
 * @param {number} currentPrice - Gi√° hi·ªán t·∫°i (ƒë·ªÉ t√≠nh step)
 * @returns {number[]} - M·∫£ng c√°c gi√° h·ª£p l·ªá
 */
export function generateValidPriceRange(minPrice, maxPrice, currentPrice) {
  const step = calculatePriceStep(currentPrice);
  const validPrices = [];
  
  let price = roundToValidPrice(minPrice);
  while (price <= maxPrice) {
    validPrices.push(price);
    price += step;
  }
  
  return validPrices;
}

/**
 * Format gi√° theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
 * @param {number} price - Gi√° c·∫ßn format
 * @returns {string} - Gi√° ƒë√£ ƒë∆∞·ª£c format
 */
export function formatPrice(price) {
  return new Intl.NumberFormat('vi-VN').format(price);
}

// Export constants cho reference
export const PRICE_STEP_RULES = [
  { min: 0, max: 9999, step: 10, description: "< 10,000 VNƒê" },
  { min: 10000, max: 49999, step: 50, description: "10,000 - 49,999 VNƒê" },
  { min: 50000, max: 99999, step: 100, description: "50,000 - 99,999 VNƒê" },
  { min: 100000, max: 499999, step: 500, description: "100,000 - 499,999 VNƒê" },
  { min: 500000, max: Infinity, step: 1000, description: "‚â• 500,000 VNƒê" }
];