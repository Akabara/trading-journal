const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

/**
 * Cost Basis Adjuster - T√≠nh to√°n gi√° v·ªën c√≥ ƒëi·ªÅu ch·ªânh
 * √Åp d·ª•ng c√°c adjustments v√†o purchase lots theo timeline
 */

/**
 * √Åp d·ª•ng cost basis adjustments cho m·ªôt purchase lot
 * @param {Object} purchaseLot - Purchase lot g·ªëc
 * @param {Array} adjustments - Danh s√°ch adjustments ƒë√£ s·∫Øp x·∫øp theo th·ªùi gian
 * @returns {Object} Adjusted purchase lot v·ªõi cost basis m·ªõi
 */
function applyAdjustmentsToLot(purchaseLot, adjustments) {
  let adjustedLot = { ...purchaseLot };
  let adjustedTotalCost = purchaseLot.totalCost;
  let adjustedQuantity = purchaseLot.quantity;
  let adjustedRemainingQuantity = purchaseLot.remainingQuantity;
  
  // L·ªçc adjustments c√≥ hi·ªáu l·ª±c sau ng√†y mua lot n√†y
  const effectiveAdjustments = adjustments.filter(adj => 
    new Date(adj.eventDate) >= new Date(purchaseLot.purchaseDate) && adj.isActive
  );
  
  console.log(`    üìã √Åp d·ª•ng ${effectiveAdjustments.length} adjustments cho lot ${purchaseLot.id}`);
  
  for (const adjustment of effectiveAdjustments) {
    switch (adjustment.adjustmentType) {
      case 'CASH_DIVIDEND':
        // Gi·∫£m cost basis theo dividend per share
        const dividendAdjustment = adjustedQuantity * adjustment.dividendPerShare;
        adjustedTotalCost -= dividendAdjustment;
        console.log(`      üí∞ Cash dividend: -${dividendAdjustment.toLocaleString('vi-VN')} VND (${adjustment.dividendPerShare.toLocaleString('vi-VN')} √ó ${adjustedQuantity})`);
        break;
        
      case 'STOCK_DIVIDEND':
      case 'STOCK_SPLIT':
        // ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng v√† cost basis
        const newQuantity = Math.floor(adjustedQuantity * adjustment.splitRatio);
        const newRemainingQuantity = Math.floor(adjustedRemainingQuantity * adjustment.splitRatio);
        
        console.log(`      üìà ${adjustment.adjustmentType}: ${adjustedQuantity} ‚Üí ${newQuantity} cp (ratio: ${adjustment.splitRatio})`);
        
        adjustedQuantity = newQuantity;
        adjustedRemainingQuantity = newRemainingQuantity;
        // Cost basis remains same, but cost per share decreases proportionally
        break;
        
      default:
        console.log(`      ‚ö†Ô∏è  Adjustment type ${adjustment.adjustmentType} ch∆∞a ƒë∆∞·ª£c implement`);
        break;
    }
  }
  
  // T√≠nh cost per share ƒëi·ªÅu ch·ªânh
  const adjustedCostPerShare = adjustedQuantity > 0 ? adjustedTotalCost / adjustedQuantity : 0;
  
  return {
    ...adjustedLot,
    totalCost: adjustedTotalCost,
    quantity: adjustedQuantity,
    remainingQuantity: adjustedRemainingQuantity,
    adjustedCostPerShare: Math.round(adjustedCostPerShare),
    appliedAdjustments: effectiveAdjustments.length
  };
}

/**
 * L·∫•y t·∫•t c·∫£ adjustments c√≥ hi·ªáu l·ª±c cho m·ªôt ticker
 * @param {string} userId
 * @param {string} stockAccountId  
 * @param {string} ticker
 * @param {Date} asOfDate - T√≠nh ƒë·∫øn ng√†y n√†y (optional)
 * @returns {Array} Danh s√°ch adjustments
 */
async function getEffectiveAdjustments(userId, stockAccountId, ticker, asOfDate = null) {
  const whereClause = {
    userId,
    stockAccountId,
    ticker: ticker.toUpperCase(),
    isActive: true
  };
  
  if (asOfDate) {
    whereClause.eventDate = { lte: new Date(asOfDate) };
  }
  
  return await prisma.costBasisAdjustment.findMany({
    where: whereClause,
    orderBy: { eventDate: 'asc' }
  });
}

/**
 * T√≠nh cost basis ƒëi·ªÅu ch·ªânh cho t·∫•t c·∫£ lots c·ªßa m·ªôt ticker
 * @param {string} userId
 * @param {string} stockAccountId
 * @param {string} ticker
 * @param {Date} asOfDate - T√≠nh ƒë·∫øn ng√†y n√†y (optional)
 * @returns {Object} Adjusted portfolio data
 */
async function calculateAdjustedCostBasis(userId, stockAccountId, ticker, asOfDate = null) {
  console.log(`üîÑ T√≠nh cost basis ƒëi·ªÅu ch·ªânh cho ${ticker}...`);
  
  try {
    // 1. L·∫•y t·∫•t c·∫£ purchase lots
    const originalLots = await prisma.purchaseLot.findMany({
      where: {
        userId,
        stockAccountId,
        ticker: ticker.toUpperCase(),
        remainingQuantity: { gt: 0 }
      },
      orderBy: { purchaseDate: 'asc' }
    });
    
    if (originalLots.length === 0) {
      return {
        ticker,
        totalQuantity: 0,
        totalCost: 0,
        averageCostBasis: 0,
        adjustedLots: [],
        appliedAdjustmentsCount: 0
      };
    }
    
    // 2. L·∫•y t·∫•t c·∫£ adjustments
    const adjustments = await getEffectiveAdjustments(userId, stockAccountId, ticker, asOfDate);
    
    console.log(`  üìä T√¨m th·∫•y ${originalLots.length} lots v√† ${adjustments.length} adjustments`);
    
    // 3. √Åp d·ª•ng adjustments cho t·ª´ng lot
    const adjustedLots = originalLots.map(lot => 
      applyAdjustmentsToLot(lot, adjustments)
    );
    
    // 4. T√≠nh t·ªïng k·∫øt
    const totalQuantity = adjustedLots.reduce((sum, lot) => sum + lot.remainingQuantity, 0);
    const totalCost = adjustedLots.reduce((sum, lot) => {
      return sum + (lot.remainingQuantity * lot.adjustedCostPerShare);
    }, 0);
    const averageCostBasis = totalQuantity > 0 ? totalCost / totalQuantity : 0;
    
    console.log(`  ‚úÖ K·∫øt qu·∫£:`);
    console.log(`     T·ªïng SL: ${totalQuantity} cp`);
    console.log(`     T·ªïng cost: ${totalCost.toLocaleString('vi-VN')} VND`);
    console.log(`     Gi√° v·ªën TB: ${Math.round(averageCostBasis).toLocaleString('vi-VN')} VND/cp`);
    
    return {
      ticker,
      totalQuantity,
      totalCost,
      averageCostBasis: Math.round(averageCostBasis),
      adjustedLots,
      appliedAdjustmentsCount: adjustments.length,
      adjustments
    };
    
  } catch (error) {
    console.error(`‚ùå L·ªói t√≠nh cost basis ƒëi·ªÅu ch·ªânh cho ${ticker}:`, error.message);
    throw error;
  }
}

/**
 * √Åp d·ª•ng adjustments cho to√†n b·ªô portfolio
 * @param {string} userId
 * @param {string} stockAccountId - optional, n·∫øu null th√¨ l·∫•y t·∫•t c·∫£ accounts
 * @param {Date} asOfDate - optional
 * @returns {Array} Adjusted portfolio
 */
async function calculateAdjustedPortfolio(userId, stockAccountId = null, asOfDate = null) {
  console.log(`üîÑ T√≠nh portfolio ƒëi·ªÅu ch·ªânh cho user ${userId}...`);
  
  try {
    // L·∫•y danh s√°ch t·∫•t c·∫£ tickers c√≥ trong portfolio
    const whereClause = { 
      userId,
      remainingQuantity: { gt: 0 }
    };
    if (stockAccountId) {
      whereClause.stockAccountId = stockAccountId;
    }
    
    const activeLots = await prisma.purchaseLot.findMany({
      where: whereClause,
      distinct: ['ticker', 'stockAccountId'],
      select: { ticker: true, stockAccountId: true }
    });
    
    console.log(`  üìã T√¨m th·∫•y ${activeLots.length} ticker-account combinations`);
    
    // T√≠nh cost basis ƒëi·ªÅu ch·ªânh cho t·ª´ng ticker-account
    const adjustedPositions = [];
    
    for (const position of activeLots) {
      try {
        const adjustedData = await calculateAdjustedCostBasis(
          userId,
          position.stockAccountId,
          position.ticker,
          asOfDate
        );
        
        if (adjustedData.totalQuantity > 0) {
          adjustedPositions.push({
            ...adjustedData,
            stockAccountId: position.stockAccountId
          });
        }
      } catch (error) {
        console.error(`‚ùå L·ªói t√≠nh ${position.ticker}:`, error.message);
        // Continue with other positions
      }
    }
    
    console.log(`‚úÖ Ho√†n th√†nh portfolio ƒëi·ªÅu ch·ªânh: ${adjustedPositions.length} positions`);
    
    return adjustedPositions;
    
  } catch (error) {
    console.error(`‚ùå L·ªói t√≠nh portfolio ƒëi·ªÅu ch·ªânh:`, error.message);
    throw error;
  }
}

/**
 * So s√°nh cost basis tr∆∞·ªõc v√† sau adjustments
 * @param {string} userId
 * @param {string} stockAccountId
 * @param {string} ticker
 * @returns {Object} Comparison data
 */
async function compareCostBasis(userId, stockAccountId, ticker) {
  try {
    // Cost basis g·ªëc (kh√¥ng ƒëi·ªÅu ch·ªânh)
    const originalLots = await prisma.purchaseLot.findMany({
      where: {
        userId,
        stockAccountId,
        ticker: ticker.toUpperCase(),
        remainingQuantity: { gt: 0 }
      }
    });
    
    const originalTotalQuantity = originalLots.reduce((sum, lot) => sum + lot.remainingQuantity, 0);
    const originalTotalCost = originalLots.reduce((sum, lot) => {
      const costPerShare = Math.round(lot.totalCost / lot.quantity);
      return sum + (lot.remainingQuantity * costPerShare);
    }, 0);
    const originalAvgCost = originalTotalQuantity > 0 ? originalTotalCost / originalTotalQuantity : 0;
    
    // Cost basis ƒëi·ªÅu ch·ªânh
    const adjustedData = await calculateAdjustedCostBasis(userId, stockAccountId, ticker);
    
    return {
      ticker,
      original: {
        totalQuantity: originalTotalQuantity,
        totalCost: originalTotalCost,
        averageCostBasis: Math.round(originalAvgCost)
      },
      adjusted: {
        totalQuantity: adjustedData.totalQuantity,
        totalCost: adjustedData.totalCost,
        averageCostBasis: adjustedData.averageCostBasis
      },
      differences: {
        quantityDiff: adjustedData.totalQuantity - originalTotalQuantity,
        costDiff: adjustedData.totalCost - originalTotalCost,
        avgCostDiff: adjustedData.averageCostBasis - Math.round(originalAvgCost)
      },
      adjustments: adjustedData.adjustments
    };
  } catch (error) {
    console.error(`‚ùå L·ªói so s√°nh cost basis cho ${ticker}:`, error.message);
    throw error;
  }
}

module.exports = {
  applyAdjustmentsToLot,
  getEffectiveAdjustments,
  calculateAdjustedCostBasis,
  calculateAdjustedPortfolio,
  compareCostBasis
}; 