// Use centralized Prisma client
const dbModule = require('./database.js');
const prisma = dbModule.default || dbModule;

/**
 * Dividend Processor - X·ª≠ l√Ω c√°c s·ª± ki·ªán corporate actions
 * D·ª±a tr√™n ph∆∞∆°ng ph√°p FIFO nghi√™m ng·∫∑t v·ªõi cost basis adjustment
 */

/**
 * X·ª≠ l√Ω c·ªï t·ª©c ti·ªÅn m·∫∑t
 * @param {string} userId - ID c·ªßa user
 * @param {string} stockAccountId - ID c·ªßa stock account  
 * @param {string} ticker - M√£ c·ªï phi·∫øu
 * @param {number} dividendPerShare - C·ªï t·ª©c m·ªói c·ªï phi·∫øu (VND)
 * @param {Date} exDate - Ng√†y ex-dividend
 * @param {number} taxRate - Thu·∫ø su·∫•t (m·∫∑c ƒë·ªãnh 0.05 = 5%)
 * @param {string} description - M√¥ t·∫£
 * @param {string} externalRef - Tham chi·∫øu external
 */
async function handleCashDividend(userId, stockAccountId, ticker, dividendPerShare, exDate, taxRate = 0.05, description = null, externalRef = null) {
  console.log(`üîÑ X·ª≠ l√Ω c·ªï t·ª©c ti·ªÅn m·∫∑t cho ${ticker}: ${dividendPerShare.toLocaleString('vi-VN')} VND/cp`);
  
  try {
    // L·∫•y t·∫•t c·∫£ purchase lots hi·ªán c√≥ c·ªßa ticker n√†y
    const activeLots = await prisma.purchaseLot.findMany({
      where: {
        userId,
        stockAccountId,
        ticker: ticker.toUpperCase(),
        remainingQuantity: { gt: 0 }
      },
      orderBy: { purchaseDate: 'asc' }
    });
    
    if (activeLots.length === 0) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y l√¥ mua n√†o cho ${ticker} trong t√†i kho·∫£n n√†y`);
    }
    
    // T√≠nh t·ªïng s·ªë c·ªï phi·∫øu hi·ªán c√≥
    const totalShares = activeLots.reduce((sum, lot) => sum + lot.remainingQuantity, 0);
    const totalDividend = totalShares * dividendPerShare;
    const totalTax = totalDividend * taxRate;
    const netDividendReceived = totalDividend - totalTax;
    
    console.log(`  üìä Th·ªëng k√™:`);
    console.log(`     T·ªïng s·ªë c·ªï phi·∫øu: ${totalShares} cp`);
    console.log(`     C·ªï t·ª©c tr∆∞·ªõc thu·∫ø: ${totalDividend.toLocaleString('vi-VN')} VND`);
    console.log(`     Thu·∫ø (${(taxRate * 100).toFixed(1)}%): ${totalTax.toLocaleString('vi-VN')} VND`);
    console.log(`     C·ªï t·ª©c th·ª±c nh·∫≠n: ${netDividendReceived.toLocaleString('vi-VN')} VND`);
    
    // S·ª≠ d·ª•ng transaction ƒë·ªÉ ƒë·∫£m b·∫£o consistency
    const result = await prisma.$transaction(async (tx) => {
      // 1. T·∫°o cost basis adjustment record
      const adjustment = await tx.costBasisAdjustment.create({
        data: {
          userId,
          stockAccountId,
          ticker: ticker.toUpperCase(),
          adjustmentType: 'CASH_DIVIDEND',
          eventDate: new Date(exDate),
          dividendPerShare,
          taxRate,
          description: description || `C·ªï t·ª©c ti·ªÅn m·∫∑t ${ticker} - ${dividendPerShare.toLocaleString('vi-VN')} VND/cp`,
          externalRef,
          isActive: true,
          processedAt: new Date(),
          createdBy: userId
        }
      });
      
      // 2. T·∫°o account fee record cho thu·∫ø
      const taxRecord = await tx.accountFee.create({
        data: {
          userId,
          stockAccountId,
          feeType: 'DIVIDEND_TAX',
          amount: totalTax,
          description: `Thu·∫ø c·ªï t·ª©c ${ticker} - ${dividendPerShare.toLocaleString('vi-VN')} VND/cp √ó ${totalShares} cp`,
          feeDate: new Date(exDate),
          referenceNumber: externalRef,
          isActive: true
        }
      });
      
      return { adjustment, taxRecord, totalDividend, totalTax, netDividendReceived };
    });
    
    console.log(`‚úÖ ƒê√£ t·∫°o adjustment ID: ${result.adjustment.id}`);
    console.log(`‚úÖ ƒê√£ t·∫°o tax record ID: ${result.taxRecord.id}`);
    
    return {
      success: true,
      adjustmentId: result.adjustment.id,
      taxRecordId: result.taxRecord.id,
      totalShares,
      totalDividend: result.totalDividend,
      totalTax: result.totalTax,
      netDividendReceived: result.netDividendReceived,
      dividendPerShare
    };
    
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω c·ªï t·ª©c ${ticker}:`, error.message);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω c·ªï t·ª©c c·ªï phi·∫øu (stock dividend)
 * @param {string} userId - ID c·ªßa user
 * @param {string} stockAccountId - ID c·ªßa stock account
 * @param {string} ticker - M√£ c·ªï phi·∫øu
 * @param {number} stockDividendRatio - T·ª∑ l·ªá c·ªï t·ª©c c·ªï phi·∫øu (e.g., 0.1 = 10%)
 * @param {Date} exDate - Ng√†y ex-dividend
 * @param {string} description - M√¥ t·∫£
 * @param {string} externalRef - Tham chi·∫øu external
 */
async function handleStockDividend(userId, stockAccountId, ticker, stockDividendRatio, exDate, description = null, externalRef = null) {
  console.log(`üîÑ X·ª≠ l√Ω c·ªï t·ª©c c·ªï phi·∫øu cho ${ticker}: ${(stockDividendRatio * 100).toFixed(2)}%`);
  
  try {
    // L·∫•y t·∫•t c·∫£ purchase lots hi·ªán c√≥
    const activeLots = await prisma.purchaseLot.findMany({
      where: {
        userId,
        stockAccountId,
        ticker: ticker.toUpperCase(),
        remainingQuantity: { gt: 0 }
      },
      orderBy: { purchaseDate: 'asc' }
    });
    
    if (activeLots.length === 0) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y l√¥ mua n√†o cho ${ticker} trong t√†i kho·∫£n n√†y`);
    }
    
    const totalShares = activeLots.reduce((sum, lot) => sum + lot.remainingQuantity, 0);
    const bonusShares = Math.floor(totalShares * stockDividendRatio); // L√†m tr√≤n xu·ªëng
    
    console.log(`  üìä Th·ªëng k√™:`);
    console.log(`     T·ªïng s·ªë c·ªï phi·∫øu hi·ªán c√≥: ${totalShares} cp`);
    console.log(`     C·ªï phi·∫øu th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c: ${bonusShares} cp`);
    console.log(`     T·ª∑ l·ªá th·ª±c t·∫ø: ${(bonusShares / totalShares * 100).toFixed(4)}%`);
    
    const result = await prisma.$transaction(async (tx) => {
      // T·∫°o adjustment record cho stock dividend
      const adjustment = await tx.costBasisAdjustment.create({
        data: {
          userId,
          stockAccountId,
          ticker: ticker.toUpperCase(),
          adjustmentType: 'STOCK_DIVIDEND',
          eventDate: new Date(exDate),
          splitRatio: 1 + stockDividendRatio, // e.g., 1.1 cho 10% stock dividend
          description: description || `C·ªï t·ª©c c·ªï phi·∫øu ${ticker} - ${(stockDividendRatio * 100).toFixed(2)}%`,
          externalRef,
          isActive: true,
          processedAt: new Date(),
          createdBy: userId
        }
      });
      
      return { adjustment, bonusShares };
    });
    
    console.log(`‚úÖ ƒê√£ t·∫°o stock dividend adjustment ID: ${result.adjustment.id}`);
    
    return {
      success: true,
      adjustmentId: result.adjustment.id,
      totalShares,
      bonusShares: result.bonusShares,
      stockDividendRatio
    };
    
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω c·ªï t·ª©c c·ªï phi·∫øu ${ticker}:`, error.message);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω chia t√°ch c·ªï phi·∫øu (stock split)
 * @param {string} userId - ID c·ªßa user
 * @param {string} stockAccountId - ID c·ªßa stock account
 * @param {string} ticker - M√£ c·ªï phi·∫øu
 * @param {number} splitRatio - T·ª∑ l·ªá chia t√°ch (e.g., 2.0 cho split 1:2)
 * @param {Date} exDate - Ng√†y th·ª±c hi·ªán split
 * @param {string} description - M√¥ t·∫£
 * @param {string} externalRef - Tham chi·∫øu external
 */
async function handleStockSplit(userId, stockAccountId, ticker, splitRatio, exDate, description = null, externalRef = null) {
  console.log(`üîÑ X·ª≠ l√Ω chia t√°ch c·ªï phi·∫øu cho ${ticker}: t·ª∑ l·ªá ${splitRatio}:1`);
  
  try {
    const activeLots = await prisma.purchaseLot.findMany({
      where: {
        userId,
        stockAccountId,
        ticker: ticker.toUpperCase(),
        remainingQuantity: { gt: 0 }
      },
      orderBy: { purchaseDate: 'asc' }
    });
    
    if (activeLots.length === 0) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y l√¥ mua n√†o cho ${ticker} trong t√†i kho·∫£n n√†y`);
    }
    
    const totalSharesBefore = activeLots.reduce((sum, lot) => sum + lot.remainingQuantity, 0);
    const totalSharesAfter = Math.floor(totalSharesBefore * splitRatio);
    
    console.log(`  üìä Th·ªëng k√™:`);
    console.log(`     S·ªë c·ªï phi·∫øu tr∆∞·ªõc split: ${totalSharesBefore} cp`);
    console.log(`     S·ªë c·ªï phi·∫øu sau split: ${totalSharesAfter} cp`);
    console.log(`     T·ª∑ l·ªá split: ${splitRatio}:1`);
    
    const result = await prisma.$transaction(async (tx) => {
      // T·∫°o adjustment record cho stock split
      const adjustment = await tx.costBasisAdjustment.create({
        data: {
          userId,
          stockAccountId,
          ticker: ticker.toUpperCase(),
          adjustmentType: 'STOCK_SPLIT',
          eventDate: new Date(exDate),
          splitRatio,
          description: description || `Chia t√°ch c·ªï phi·∫øu ${ticker} - t·ª∑ l·ªá ${splitRatio}:1`,
          externalRef,
          isActive: true,
          processedAt: new Date(),
          createdBy: userId
        }
      });
      
      return { adjustment, totalSharesAfter };
    });
    
    console.log(`‚úÖ ƒê√£ t·∫°o stock split adjustment ID: ${result.adjustment.id}`);
    
    return {
      success: true,
      adjustmentId: result.adjustment.id,
      totalSharesBefore,
      totalSharesAfter: result.totalSharesAfter,
      splitRatio
    };
    
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω chia t√°ch c·ªï phi·∫øu ${ticker}:`, error.message);
    throw error;
  }
}

/**
 * L·∫•y t·∫•t c·∫£ adjustments cho m·ªôt ticker trong m·ªôt stock account
 */
async function getAdjustmentsForStock(userId, stockAccountId, ticker) {
  return await prisma.costBasisAdjustment.findMany({
    where: {
      userId,
      stockAccountId,
      ticker: ticker.toUpperCase(),
      isActive: true
    },
    orderBy: { eventDate: 'asc' }
  });
}

/**
 * Validate adjustment tr∆∞·ªõc khi t·∫°o
 */
function validateAdjustmentData(adjustmentType, data) {
  switch (adjustmentType) {
    case 'CASH_DIVIDEND':
      if (!data.dividendPerShare || data.dividendPerShare <= 0) {
        throw new Error('C·ªï t·ª©c m·ªói c·ªï phi·∫øu ph·∫£i l·ªõn h∆°n 0');
      }
      if (!data.taxRate || data.taxRate < 0 || data.taxRate > 1) {
        throw new Error('Thu·∫ø su·∫•t ph·∫£i n·∫±m trong kho·∫£ng 0-1');
      }
      break;
    case 'STOCK_DIVIDEND':
      if (!data.stockDividendRatio || data.stockDividendRatio <= 0) {
        throw new Error('T·ª∑ l·ªá c·ªï t·ª©c c·ªï phi·∫øu ph·∫£i l·ªõn h∆°n 0');
      }
      break;
    case 'STOCK_SPLIT':
      if (!data.splitRatio || data.splitRatio <= 0) {
        throw new Error('T·ª∑ l·ªá chia t√°ch ph·∫£i l·ªõn h∆°n 0');
      }
      break;
    default:
      throw new Error(`Lo·∫°i adjustment kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${adjustmentType}`);
  }
}

module.exports = {
  handleCashDividend,
  handleStockDividend,
  handleStockSplit,
  getAdjustmentsForStock,
  validateAdjustmentData
}; 