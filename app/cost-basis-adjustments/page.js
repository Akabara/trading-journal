'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import SigninModal from '../components/SigninModal';
import DividendEventForm from '../components/DividendEventForm';
import { useNotification } from '../components/Notification';

export default function CostBasisAdjustmentsPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const { showSuccess, showError } = useNotification();
  
  const [adjustments, setAdjustments] = useState([]);
  const [stockAccounts, setStockAccounts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [signinModalOpen, setSigninModalOpen] = useState(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  
  // Filters
  const [filters, setFilters] = useState({
    ticker: '',
    adjustmentType: '',
    isActive: 'true'
  });

  useEffect(() => {
    if (status === 'unauthenticated') {
      setSigninModalOpen(true);
    }
  }, [status]);

  useEffect(() => {
    if (status === 'authenticated') {
      fetchAdjustments();
      fetchStockAccounts();
    }
  }, [status, filters]);

  const fetchStockAccounts = async () => {
    try {
      const response = await fetch('/api/stock-accounts');
      if (response.ok) {
        const accounts = await response.json();
        setStockAccounts(Array.isArray(accounts) ? accounts : []);
      }
    } catch (error) {
      console.error('Error fetching stock accounts:', error);
    }
  };

  const fetchAdjustments = async () => {
    setIsLoading(true);
    try {
      const params = new URLSearchParams();
      if (filters.ticker) params.append('ticker', filters.ticker);
      if (filters.adjustmentType) params.append('adjustmentType', filters.adjustmentType);
      if (filters.isActive !== '') params.append('isActive', filters.isActive);
      
      const queryString = params.toString();
      const url = `/api/cost-basis-adjustments${queryString ? `?${queryString}` : ''}`;
      
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·ª± ki·ªán quy·ªÅn');
      }
      const data = await response.json();
      setAdjustments(data.adjustments || []);
    } catch (err) {
      setError('L·ªói khi t·∫£i s·ª± ki·ªán quy·ªÅn: ' + err.message);
      console.error('Fetch error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFilterChange = (newFilters) => {
    setFilters(prevFilters => ({ ...prevFilters, ...newFilters }));
  };

  const handleDeleteAdjustment = async (id) => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·ª± ki·ªán quy·ªÅn n√†y?')) return;
    
    try {
      const response = await fetch(`/api/cost-basis-adjustments/${id}`, {
        method: 'DELETE'
      });
      
      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ x√≥a s·ª± ki·ªán quy·ªÅn');
      }
      
      setAdjustments(adjustments.filter(adj => adj.id !== id));
      showSuccess('‚úÖ ƒê√£ x√≥a s·ª± ki·ªán quy·ªÅn th√†nh c√¥ng!');
    } catch (err) {
      showError('‚ùå L·ªói khi x√≥a s·ª± ki·ªán quy·ªÅn: ' + err.message);
    }
  };

  const handleToggleActive = async (id, isActive) => {
    try {
      const response = await fetch(`/api/cost-basis-adjustments/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ isActive: !isActive })
      });
      
      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i');
      }
      
      setAdjustments(adjustments.map(adj => 
        adj.id === id ? { ...adj, isActive: !isActive } : adj
      ));
      showSuccess(`‚úÖ ƒê√£ ${!isActive ? 'k√≠ch ho·∫°t' : 'v√¥ hi·ªáu h√≥a'} s·ª± ki·ªán quy·ªÅn!`);
    } catch (err) {
      showError('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: ' + err.message);
    }
  };

  const handleAddSuccess = (result) => {
    setIsAddModalOpen(false);
    showSuccess(`‚úÖ ${result.adjustmentType} cho ${result.ticker} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!`);
    fetchAdjustments(); // Refresh list
  };

  const formatAdjustmentType = (type) => {
    const types = {
      'CASH_DIVIDEND': 'ü™ô C·ªï t·ª©c ti·ªÅn m·∫∑t',
      'STOCK_DIVIDEND': 'üìä C·ªï t·ª©c c·ªï phi·∫øu', 
      'STOCK_SPLIT': 'üìà T√°ch c·ªï phi·∫øu',
      'REVERSE_SPLIT': 'üìâ G·ªôp c·ªï phi·∫øu',
      'MERGER': 'ü§ù S√°p nh·∫≠p',
      'SPINOFF': 'üîÑ T√°ch t√†i s·∫£n'
    };
    return types[type] || type;
  };

  const getAdjustmentDetails = (adj) => {
    if (adj.adjustmentType === 'CASH_DIVIDEND' && adj.dividendPerShare) {
      return `${adj.dividendPerShare.toLocaleString('vi-VN')} VND/cp`;
    }
    if ((adj.adjustmentType === 'STOCK_SPLIT' || adj.adjustmentType === 'REVERSE_SPLIT') && adj.splitRatio) {
      return `T·ª∑ l·ªá: ${adj.splitRatio}`;
    }
    return '-';
  };

  if (status === 'loading') {
    return (
      <div className="flex justify-center items-center h-64">
        <p>ƒêang t·∫£i...</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Header */}
      <div className="gradient-bg text-white py-12">
        <div className="max-w-6xl mx-auto px-4">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-4xl font-bold mb-4">Qu·∫£n l√Ω S·ª± ki·ªán Quy·ªÅn</h1>
              <p className="text-xl opacity-90">Theo d√µi c√°c s·ª± ki·ªán quy·ªÅn ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° v·ªën c·ªï phi·∫øu</p>
            </div>
            {status === 'authenticated' && (
              <button
                onClick={() => setIsAddModalOpen(true)}
                className="bg-white text-blue-900 px-6 py-3 rounded-lg font-bold hover:bg-blue-100 transition shadow-lg flex items-center"
              >
                <i className="fas fa-plus mr-2"></i>
                Th√™m S·ª± ki·ªán Quy·ªÅn
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-6xl mx-auto p-4 mt-6">
        {status === 'unauthenticated' ? (
          <div className="bg-white rounded-lg shadow-lg p-12 text-center">
            <div className="flex flex-col items-center">
              <i className="fas fa-lock text-gray-400 text-6xl mb-6"></i>
              <h3 className="text-2xl font-semibold text-gray-700 mb-4">ƒêƒÉng nh·∫≠p ƒë·ªÉ xem s·ª± ki·ªán quy·ªÅn</h3>
              <p className="text-gray-500 mb-6">Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p th√¥ng tin s·ª± ki·ªán quy·ªÅn</p>
            </div>
          </div>
        ) : (
          <>
            {/* Filters */}
            <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    M√£ c·ªï phi·∫øu
                  </label>
                  <input
                    type="text"
                    className="input-field"
                    value={filters.ticker}
                    onChange={(e) => handleFilterChange({ ticker: e.target.value.toUpperCase() })}
                    placeholder="VD: VLB"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Lo·∫°i s·ª± ki·ªán quy·ªÅn
                  </label>
                  <select
                    className="input-field"
                    value={filters.adjustmentType}
                    onChange={(e) => handleFilterChange({ adjustmentType: e.target.value })}
                  >
                    <option value="">T·∫•t c·∫£</option>
                    <option value="CASH_DIVIDEND">C·ªï t·ª©c ti·ªÅn m·∫∑t</option>
                    <option value="STOCK_DIVIDEND">C·ªï t·ª©c c·ªï phi·∫øu</option>
                    <option value="STOCK_SPLIT">T√°ch c·ªï phi·∫øu</option>
                    <option value="REVERSE_SPLIT">G·ªôp c·ªï phi·∫øu</option>
                    <option value="MERGER">S√°p nh·∫≠p</option>
                    <option value="SPINOFF">T√°ch t√†i s·∫£n</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Tr·∫°ng th√°i
                  </label>
                  <select
                    className="input-field"
                    value={filters.isActive}
                    onChange={(e) => handleFilterChange({ isActive: e.target.value })}
                  >
                    <option value="">T·∫•t c·∫£</option>
                    <option value="true">K√≠ch ho·∫°t</option>
                    <option value="false">V√¥ hi·ªáu</option>
                  </select>
                </div>
                
                <div className="flex items-end">
                  <button
                    onClick={() => setFilters({ ticker: '', adjustmentType: '', isActive: 'true' })}
                    className="btn-secondary w-full"
                  >
                    <i className="fas fa-redo mr-2"></i>
                    ƒê·∫∑t l·∫°i
                  </button>
                </div>
              </div>
            </div>

            {error && (
              <div className="bg-red-50 border-l-4 border-red-500 text-red-700 p-4 rounded mb-6">
                <div className="flex items-center">
                  <i className="fas fa-exclamation-triangle mr-2"></i>
                  {error}
                </div>
              </div>
            )}

            {isLoading ? (
              <div className="bg-white rounded-lg shadow-lg p-12 text-center">
                <div className="flex flex-col items-center">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
                  <p className="text-gray-600">ƒêang t·∫£i s·ª± ki·ªán quy·ªÅn...</p>
                </div>
              </div>
            ) : (
              <div className="bg-white rounded-lg shadow-lg overflow-hidden">
                <div className="p-6 bg-gradient-to-r from-green-50 to-emerald-50 border-b border-gray-200">
                  <div className="flex items-center">
                    <i className="fas fa-calendar-check text-green-600 text-xl mr-3"></i>
                    <div className="font-semibold text-gray-800">
                      {adjustments.length} s·ª± ki·ªán quy·ªÅn
                    </div>
                  </div>
                </div>
                
                {adjustments.length === 0 ? (
                  <div className="p-12 text-center">
                    <i className="fas fa-inbox text-gray-400 text-4xl mb-4"></i>
                    <h3 className="text-lg font-medium text-gray-700 mb-2">Ch∆∞a c√≥ s·ª± ki·ªán quy·ªÅn n√†o</h3>
                    <p className="text-gray-500 mb-4">Th√™m s·ª± ki·ªán quy·ªÅn ƒë·∫ßu ti√™n cho c√°c s·ª± ki·ªán ·∫£nh h∆∞·ªüng gi√° v·ªën</p>
                    <button
                      onClick={() => setIsAddModalOpen(true)}
                      className="btn-primary"
                    >
                                              <i className="fas fa-plus mr-2"></i>
                        Th√™m s·ª± ki·ªán quy·ªÅn
                    </button>
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            C·ªï phi·∫øu
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Lo·∫°i s·ª± ki·ªán quy·ªÅn
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Chi ti·∫øt
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Ng√†y s·ª± ki·ªán
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Tr·∫°ng th√°i
                          </th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            H√†nh ƒë·ªông
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {adjustments.map((adjustment) => (
                          <tr key={adjustment.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm font-medium text-gray-900">
                                {adjustment.ticker}
                              </div>
                              <div className="text-sm text-gray-500">
                                {adjustment.stockAccountId}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm text-gray-900">
                                {formatAdjustmentType(adjustment.adjustmentType)}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm text-gray-900">
                                {getAdjustmentDetails(adjustment)}
                              </div>
                              {adjustment.description && (
                                <div className="text-sm text-gray-500">
                                  {adjustment.description}
                                </div>
                              )}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm text-gray-900">
                                {new Date(adjustment.eventDate).toLocaleDateString('vi-VN')}
                              </div>
                              <div className="text-sm text-gray-500">
                                {adjustment.processedAt ? 'ƒê√£ x·ª≠ l√Ω' : 'Ch∆∞a x·ª≠ l√Ω'}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <button
                                onClick={() => handleToggleActive(adjustment.id, adjustment.isActive)}
                                className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  adjustment.isActive 
                                    ? 'bg-green-100 text-green-800' 
                                    : 'bg-gray-100 text-gray-800'
                                }`}
                              >
                                {adjustment.isActive ? 'K√≠ch ho·∫°t' : 'V√¥ hi·ªáu'}
                              </button>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                              <button
                                onClick={() => handleDeleteAdjustment(adjustment.id)}
                                className="text-red-600 hover:text-red-900"
                                title="X√≥a s·ª± ki·ªán quy·ªÅn"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}
          </>
        )}
      </div>

      {/* Signin Modal */}
      <SigninModal
        isOpen={signinModalOpen}
        onClose={() => setSigninModalOpen(false)}
      />

      {/* Add Adjustment Modal */}
      {isAddModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                          <div className="flex items-center justify-between p-6 border-b border-gray-200">
                <div className="flex items-center">
                  <i className="fas fa-calendar-check text-green-600 text-xl mr-3"></i>
                  <h2 className="text-xl font-bold text-gray-900">Th√™m S·ª± ki·ªán Quy·ªÅn</h2>
                </div>
              <button
                onClick={() => setIsAddModalOpen(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <i className="fas fa-times text-xl"></i>
              </button>
            </div>
            
            <div className="p-6">
              <DividendEventForm
                stockAccounts={stockAccounts}
                onSuccess={handleAddSuccess}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 