generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  passwordHash   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  username       String         @unique
  journalEntries JournalEntry[]
  StockAccount   StockAccount[]
  strategies     Strategy[]
  tags           Tag[]
  transactions   Transaction[]
  purchaseLots   PurchaseLot[]
  accountFees    AccountFee[]
}

model Transaction {
  id              String        @id @default(cuid())
  userId          String
  ticker          String
  type            String
  quantity        Float
  price           Float
  transactionDate DateTime
  fee             Float         @default(0)
  taxRate         Float         @default(0)
  calculatedPl    Float?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  stockAccountId  String
  journalEntry    JournalEntry?
  StockAccount    StockAccount  @relation(fields: [stockAccountId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, transactionDate])
  @@index([userId, ticker])
  @@index([stockAccountId])
}

model JournalEntry {
  id              String            @id @default(cuid())
  transactionId   String            @unique
  userId          String
  emotionOnEntry  String?
  emotionOnExit   String?
  strategyUsed    String?
  postTradeReview String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  transaction     Transaction       @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags            JournalEntryTag[]

  @@index([userId])
}

model Tag {
  id             String            @id @default(cuid())
  userId         String
  name           String
  createdAt      DateTime          @default(now())
  journalEntries JournalEntryTag[]
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model JournalEntryTag {
  journalEntryId String
  tagId          String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  tag            Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([journalEntryId, tagId])
}

model Strategy {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt(sort: Desc)])
  @@index([userId])
}

model StockPriceCache {
  id            String   @id @default(cuid())
  symbol        String   @unique
  price         Float
  lastUpdatedAt DateTime
  source        String   @default("tcbs")
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([symbol])
  @@index([lastUpdatedAt])
}

model StockAccount {
  id            String        @id
  name          String
  brokerName    String?
  accountNumber String?
  description   String?
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction   Transaction[]
  AccountFee    AccountFee[]

  @@unique([userId, name])
  @@index([userId])
}

model PurchaseLot {
  id                String    @id @default(cuid())
  userId            String
  stockAccountId    String
  ticker            String
  purchaseDate      DateTime
  quantity          Float
  pricePerShare     Float
  totalCost         Float     // (pricePerShare * quantity) + buyFee
  buyFee            Float     @default(0)
  remainingQuantity Float     // Số lượng còn lại chưa bán
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, ticker, stockAccountId])
  @@index([purchaseDate])
}

enum FeeType {
  CUSTODY_FEE           // Phí lưu ký chứng khoán
  ADVANCE_SELLING_FEE   // Phí ứng trước tiền bán
  ACCOUNT_MAINTENANCE   // Phí duy trì tài khoản
  TRANSFER_FEE          // Phí chuyển nhượng
  DIVIDEND_TAX          // Thuế cổ tức
  INTEREST_FEE          // Phí lãi vay margin
  DATA_FEED_FEE         // Phí cung cấp dữ liệu
  SMS_NOTIFICATION_FEE  // Phí SMS thông báo
  STATEMENT_FEE         // Phí sao kê
  WITHDRAWAL_FEE        // Phí rút tiền
  OTHER_FEE             // Phí khác
}

model AccountFee {
  id              String       @id @default(cuid())
  userId          String
  stockAccountId  String
  feeType         FeeType
  amount          Float        // Số tiền phí (VND)
  description     String?      // Mô tả chi tiết
  feeDate         DateTime     // Ngày phát sinh phí
  referenceNumber String?      // Số tham chiếu từ công ty chứng khoán
  attachmentUrl   String?      // Link đến file đính kèm (hóa đơn, thông báo)
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  stockAccount    StockAccount @relation(fields: [stockAccountId], references: [id], onDelete: Cascade)
  
  @@index([userId, stockAccountId])
  @@index([feeType])
  @@index([feeDate])
}
