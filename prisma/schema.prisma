// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique  // Required and unique username
  name          String?
  passwordHash  String?   // For local credentials login
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  transactions  Transaction[]
  journalEntries JournalEntry[]
  tags          Tag[]
  strategies    Strategy[]     // Strategies shared by this user
}

model Transaction {
  id              String        @id @default(cuid())
  userId          String
  ticker          String
  type            String        // "BUY" or "SELL"
  quantity        Float
  price           Float
  transactionDate DateTime
  fee             Float         @default(0)
  taxRate         Float         @default(0)
  calculatedPl    Float?
  notes           String?       // Private notes for the transaction
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntry    JournalEntry? // One-to-one relation to personal journal entry

  @@index([userId, transactionDate])
  @@index([userId, ticker])
}

// Personal Journal linked TO a specific Transaction
model JournalEntry {
  id                String   @id @default(cuid())
  transactionId     String   @unique // Ensures one journal per transaction
  userId            String
  emotionOnEntry    String?
  emotionOnExit     String?
  strategyUsed      String?  // Strategy SPECIFIC to this trade
  postTradeReview   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  transaction       Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Link to user for easier querying if needed
  tags              JournalEntryTag[]

  @@index([userId])
}

// Tags for PERSONAL Journal Entries
model Tag {
  id             String   @id @default(cuid())
  userId         String   // Tags are personal to the user
  name           String
  createdAt      DateTime @default(now())

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntries JournalEntryTag[]

  @@unique([userId, name])
}

// Join table for JournalEntry and Tag (Many-to-Many)
model JournalEntryTag {
  journalEntryId String
  tagId          String

  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  tag            Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([journalEntryId, tagId])
}

// Public Strategies (NOT linked to a specific transaction)
model Strategy {
  id        String   @id @default(cuid())
  userId    String   // Author of the strategy
  title     String?  // Optional title
  content   String   // The shared strategy content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt(sort: Desc)]) // Index for fetching newest first
  @@index([userId])
}

// Stock price cache for optimizing TCBS API calls
model StockPriceCache {
  id            String   @id @default(cuid())
  symbol        String   @unique // Stock ticker symbol
  price         Float    // Last fetched price
  lastUpdatedAt DateTime // When the price was last updated from TCBS
  source        String   @default("tcbs") // Source of the price data, for future extensibility
  metadata      Json?    // Additional data like high, low, volume, etc. (optional)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([symbol])
  @@index([lastUpdatedAt])
}
