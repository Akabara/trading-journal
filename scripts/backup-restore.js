#!/usr/bin/env node

/**
 * üîÑ BACKUP RESTORE SYSTEM
 * Script kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ backup cho Trading Journal
 * Version: 2.0 - Chu·∫©n h√≥a v√† t·ªëi ∆∞u
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

class BackupRestoreSystem {
  constructor(backupPath, options = {}) {
    this.backupPath = backupPath;
    this.options = {
      restoreDatabase: options.restoreDatabase !== false,
      restoreFiles: options.restoreFiles !== false,
      confirmBeforeRestore: options.confirmBeforeRestore !== false,
      createBackupBeforeRestore: options.createBackupBeforeRestore !== false,
      ...options
    };
    
    this.loadEnvironment();
    this.dbConfig = this.parseDbUrl(process.env.DATABASE_URL);
  }

  /**
   * Load environment variables t·ª´ .env file
   */
  loadEnvironment() {
    const envPath = path.join(process.cwd(), '.env');
    if (fs.existsSync(envPath)) {
      const envContent = fs.readFileSync(envPath, 'utf-8');
      const envLines = envContent.split('\n');
      
      for (const line of envLines) {
        const trimmed = line.trim();
        if (trimmed && !trimmed.startsWith('#') && trimmed.includes('=')) {
          const [key, ...valueParts] = trimmed.split('=');
          const value = valueParts.join('=').replace(/^["']|["']$/g, '');
          process.env[key.trim()] = value;
        }
      }
    }
  }

  /**
   * Parse DATABASE_URL th√†nh c√°c component
   */
  parseDbUrl(url) {
    if (!url) {
      throw new Error('DATABASE_URL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong .env');
    }
    
    const match = url.match(/postgresql:\/\/([^:]+):([^@]+)@([^:]+):(\d+)\/(.+)/);
    if (!match) {
      throw new Error('DATABASE_URL kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng PostgreSQL');
    }
    
    return {
      user: match[1],
      password: match[2],
      host: match[3],
      port: match[4],
      database: match[5]
    };
  }

  /**
   * Validate backup file/directory
   */
  async validateBackup() {
    console.log('üîç Ki·ªÉm tra backup...');
    
    if (!fs.existsSync(this.backupPath)) {
      throw new Error(`Backup kh√¥ng t·ªìn t·∫°i: ${this.backupPath}`);
    }
    
    let backupDir = this.backupPath;
    let isArchive = false;
    
    // N·∫øu l√† file .tar.gz, gi·∫£i n√©n tr∆∞·ªõc
    if (this.backupPath.endsWith('.tar.gz')) {
      console.log('üì¶ Gi·∫£i n√©n backup archive...');
      const extractDir = path.join(path.dirname(this.backupPath), 'temp-restore-' + Date.now());
      
      fs.mkdirSync(extractDir, { recursive: true });
      
      await execAsync(`tar -xzf "${this.backupPath}" -C "${extractDir}"`);
      
      // T√¨m th∆∞ m·ª•c backup trong extract
      const items = fs.readdirSync(extractDir);
      const backupFolder = items.find(item => 
        item.startsWith('backup-') || item.startsWith('quick-backup-')
      );
      
      if (!backupFolder) {
        throw new Error('Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c backup trong archive');
      }
      
      backupDir = path.join(extractDir, backupFolder);
      isArchive = true;
    }
    
    // Ki·ªÉm tra manifest
    const manifestPath = path.join(backupDir, 'manifest.json');
    if (!fs.existsSync(manifestPath)) {
      throw new Error('Manifest file kh√¥ng t·ªìn t·∫°i trong backup');
    }
    
    const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf-8'));
    
    // Ki·ªÉm tra database backup
    const dbBackupDir = path.join(backupDir, 'database');
    if (!fs.existsSync(dbBackupDir)) {
      throw new Error('Database backup kh√¥ng t·ªìn t·∫°i');
    }
    
    console.log(`‚úÖ Backup h·ª£p l·ªá`);
    console.log(`   üìÖ Ng√†y t·∫°o: ${new Date(manifest.date).toLocaleString('vi-VN')}`);
    console.log(`   üìã Lo·∫°i: ${manifest.type}`);
    console.log(`   üìä Version: ${manifest.version || '1.0'}`);
    
    return { backupDir, manifest, isArchive };
  }

  /**
   * T·∫°o backup hi·ªán t·∫°i tr∆∞·ªõc khi restore
   */
  async createPreRestoreBackup() {
    if (!this.options.createBackupBeforeRestore) {
      return null;
    }
    
    console.log('üíæ T·∫°o backup hi·ªán t·∫°i tr∆∞·ªõc khi restore...');
    
    try {
      const ManualBackupSystem = require('./manual-backup');
      const backupSystem = new ManualBackupSystem();
      
      // Override backup directory ƒë·ªÉ tr√°nh conflict
      backupSystem.backupBaseDir = path.join(process.cwd(), 'backups', 'pre-restore');
      backupSystem.ensureBackupDirectory();
      
      const result = await backupSystem.createQuickBackup();
      console.log(`‚úÖ Pre-restore backup: ${result}`);
      return result;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o pre-restore backup: ${error.message}`);
      return null;
    }
  }

  /**
   * Restore database
   */
  async restoreDatabase(backupDir) {
    if (!this.options.restoreDatabase) {
      console.log('‚è≠Ô∏è  B·ªè qua restore database');
      return;
    }

    console.log('üóÑÔ∏è  B·∫Øt ƒë·∫ßu restore database...');
    
    const dbBackupDir = path.join(backupDir, 'database');
    if (!fs.existsSync(dbBackupDir)) {
      throw new Error('Th∆∞ m·ª•c database backup kh√¥ng t·ªìn t·∫°i');
    }
    
    // T√¨m file backup database
    const files = fs.readdirSync(dbBackupDir);
    let dumpFile = files.find(f => f.includes('full-dump') && f.endsWith('.sql.gz'));
    
    if (!dumpFile) {
      // Fallback to any .sql.gz file
      dumpFile = files.find(f => f.endsWith('.sql.gz'));
    }
    
    if (!dumpFile) {
      throw new Error('Kh√¥ng t√¨m th·∫•y file database dump');
    }
    
    const dumpPath = path.join(dbBackupDir, dumpFile);
    
    console.log(`   üìÑ S·ª≠ d·ª•ng file: ${dumpFile}`);
    
    if (this.options.confirmBeforeRestore) {
      console.log('‚ö†Ô∏è  C·∫¢NH B√ÅO: S·∫Ω x√≥a to√†n b·ªô database hi·ªán t·∫°i!');
      console.log(`   üóÑÔ∏è  Database: ${this.dbConfig.database}`);
      console.log(`   üè† Host: ${this.dbConfig.host}:${this.dbConfig.port}`);
      
      const readline = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout
      });
      
      const answer = await new Promise(resolve => {
        readline.question('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no): ', resolve);
      });
      
      readline.close();
      
      if (answer.toLowerCase() !== 'yes') {
        throw new Error('Restore b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng');
      }
    }
    
    // Gi·∫£i n√©n file dump n·∫øu c·∫ßn
    let sqlFile = dumpPath;
    if (dumpPath.endsWith('.gz')) {
      console.log('   üì¶ Gi·∫£i n√©n database dump...');
      sqlFile = dumpPath.replace('.gz', '');
      await execAsync(`gunzip -c "${dumpPath}" > "${sqlFile}"`);
    }
    
    // Restore database
    console.log('   üîÑ ƒêang restore database...');
    
    const restoreCmd = `PGPASSWORD="${this.dbConfig.password}" psql ` +
      `-h ${this.dbConfig.host} ` +
      `-p ${this.dbConfig.port} ` +
      `-U ${this.dbConfig.user} ` +
      `-d ${this.dbConfig.database} ` +
      `-f "${sqlFile}"`;
    
    await execAsync(restoreCmd);
    
    // Cleanup temporary unzipped file
    if (sqlFile !== dumpPath && fs.existsSync(sqlFile)) {
      fs.unlinkSync(sqlFile);
    }
    
    console.log('‚úÖ Database restore ho√†n th√†nh');
  }

  /**
   * Restore files
   */
  async restoreFiles(backupDir) {
    if (!this.options.restoreFiles) {
      console.log('‚è≠Ô∏è  B·ªè qua restore files');
      return;
    }

    console.log('üìÅ B·∫Øt ƒë·∫ßu restore files...');
    
    const fileBackupDir = path.join(backupDir, 'files');
    if (!fs.existsSync(fileBackupDir)) {
      console.log('‚ö†Ô∏è  Kh√¥ng c√≥ file backup ƒë·ªÉ restore');
      return;
    }
    
    const filesToRestore = [
      { src: 'uploads', dest: 'public/uploads' },
      { src: 'images', dest: 'public/images' },
      { src: 'config/.env', dest: '.env' },
      { src: 'config/package.json', dest: 'package.json' },
      { src: 'config/next.config.js', dest: 'next.config.js' },
      { src: 'prisma', dest: 'prisma' }
    ];
    
    for (const file of filesToRestore) {
      try {
        const srcPath = path.join(fileBackupDir, file.src);
        const destPath = path.join(process.cwd(), file.dest);
        
        if (fs.existsSync(srcPath)) {
          // Backup file hi·ªán t·∫°i n·∫øu t·ªìn t·∫°i
          if (fs.existsSync(destPath)) {
            const backupPath = `${destPath}.backup.${Date.now()}`;
            if (fs.statSync(destPath).isDirectory()) {
              await execAsync(`cp -r "${destPath}" "${backupPath}"`);
            } else {
              fs.copyFileSync(destPath, backupPath);
            }
            console.log(`   üíæ Backup hi·ªán t·∫°i: ${file.dest} -> ${path.basename(backupPath)}`);
          }
          
          // Restore file
          const destDir = path.dirname(destPath);
          if (!fs.existsSync(destDir)) {
            fs.mkdirSync(destDir, { recursive: true });
          }
          
          if (fs.statSync(srcPath).isDirectory()) {
            if (fs.existsSync(destPath)) {
              await execAsync(`rm -rf "${destPath}"`);
            }
            await execAsync(`cp -r "${srcPath}" "${destPath}"`);
          } else {
            fs.copyFileSync(srcPath, destPath);
          }
          
          console.log(`   ‚úÖ Restore: ${file.src} -> ${file.dest}`);
        }
      } catch (error) {
        console.error(`   ‚ùå L·ªói restore ${file.src}: ${error.message}`);
      }
    }
  }

  /**
   * Verify restore
   */
  async verifyRestore() {
    console.log('‚úÖ Ki·ªÉm tra restore...');
    
    try {
      // Ki·ªÉm tra database connection
      const testCmd = `PGPASSWORD="${this.dbConfig.password}" psql ` +
        `-h ${this.dbConfig.host} ` +
        `-p ${this.dbConfig.port} ` +
        `-U ${this.dbConfig.user} ` +
        `-d ${this.dbConfig.database} ` +
        `-c "SELECT COUNT(*) FROM \\"User\\";" -t`;
      
      const { stdout } = await execAsync(testCmd);
      const userCount = parseInt(stdout.trim());
      
      console.log(`   üóÑÔ∏è  Database: ${userCount} users found`);
      
      // Ki·ªÉm tra c√°c file quan tr·ªçng
      const criticalFiles = [
        'package.json',
        'prisma/schema.prisma'
      ];
      
      for (const file of criticalFiles) {
        const filePath = path.join(process.cwd(), file);
        if (fs.existsSync(filePath)) {
          console.log(`   ‚úÖ File: ${file}`);
        } else {
          console.warn(`   ‚ö†Ô∏è  File kh√¥ng t·ªìn t·∫°i: ${file}`);
        }
      }
      
      console.log('‚úÖ Restore verification th√†nh c√¥ng');
      return true;
      
    } catch (error) {
      console.error('‚ùå Restore verification th·∫•t b·∫°i:', error.message);
      return false;
    }
  }

  /**
   * Cleanup temporary files
   */
  async cleanup(backupDir, isArchive) {
    if (isArchive) {
      // X√≥a th∆∞ m·ª•c extract t·∫°m th·ªùi
      const extractDir = path.dirname(backupDir);
      if (extractDir.includes('temp-restore-')) {
        await execAsync(`rm -rf "${extractDir}"`);
        console.log('üßπ ƒê√£ d·ªçn d·∫πp file t·∫°m th·ªùi');
      }
    }
  }

  /**
   * Main restore process
   */
  async run() {
    console.log('üîÑ B·∫ÆT ƒê·∫¶U BACKUP RESTORE');
    console.log('=' .repeat(60));
    console.log(`üìÅ Backup path: ${this.backupPath}`);
    console.log(`üóÑÔ∏è  Database: ${this.dbConfig.database}`);
    console.log(`üè† Host: ${this.dbConfig.host}:${this.dbConfig.port}`);
    console.log('=' .repeat(60));
    
    try {
      // 1. Validate backup
      const { backupDir, manifest, isArchive } = await this.validateBackup();
      
      // 2. T·∫°o backup tr∆∞·ªõc restore (n·∫øu c·∫ßn)
      const preRestoreBackupPath = await this.createPreRestoreBackup();
      
      // 3. Restore database
      await this.restoreDatabase(backupDir);
      
      // 4. Restore files
      await this.restoreFiles(backupDir);
      
      // 5. Verify restore
      const verified = await this.verifyRestore();
      
      // 6. Cleanup
      await this.cleanup(backupDir, isArchive);
      
      console.log('');
      console.log('üéâ RESTORE HO√ÄN TH√ÄNH!');
      console.log('=' .repeat(60));
      console.log(`üìÖ Backup date: ${new Date(manifest.date).toLocaleString('vi-VN')}`);
      console.log(`üìã Backup type: ${manifest.type}`);
      console.log(`‚úÖ Verification: ${verified ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);
      if (preRestoreBackupPath) {
        console.log(`üíæ Pre-restore backup: ${preRestoreBackupPath}`);
      }
      console.log('=' .repeat(60));
      
      return {
        success: true,
        manifest,
        verified,
        preRestoreBackupPath
      };
      
    } catch (error) {
      console.error('');
      console.error('üí• RESTORE TH·∫§T B·∫†I!');
      console.error('=' .repeat(60));
      console.error('‚ùå L·ªói:', error.message);
      console.error('=' .repeat(60));
      
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = BackupRestoreSystem;

// CLI usage
if (require.main === module) {
  const backupPath = process.argv[2];
  
  if (!backupPath) {
    console.error('‚ùå C√°ch s·ª≠ d·ª•ng: node backup-restore.js <backup-path>');
    console.error('üìù V√≠ d·ª•: node backup-restore.js ./backups/backup-2024-01-15.tar.gz');
    console.error('');
    console.error('üîß T√πy ch·ªçn:');
    console.error('   --no-confirm         Kh√¥ng h·ªèi x√°c nh·∫≠n');
    console.error('   --no-pre-backup      Kh√¥ng t·∫°o backup tr∆∞·ªõc restore');
    console.error('   --no-database        Kh√¥ng restore database');
    console.error('   --no-files           Kh√¥ng restore files');
    process.exit(1);
  }
  
  const options = {
    confirmBeforeRestore: !process.argv.includes('--no-confirm'),
    createBackupBeforeRestore: !process.argv.includes('--no-pre-backup'),
    restoreDatabase: !process.argv.includes('--no-database'),
    restoreFiles: !process.argv.includes('--no-files')
  };
  
  const restore = new BackupRestoreSystem(backupPath, options);
  restore.run().then(result => {
    process.exit(result.success ? 0 : 1);
  });
}